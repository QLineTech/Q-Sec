
import subprocess
import socket
import threading
import requests
import json
import ipaddress
import re
from typing import Dict, Optional, List, Union
import time


def get_domain_info(domain: str) -> Dict:
    """
    Verilen alan adının IP adresini ve lokasyon bilgilerini döndürür.
    
    Args:
        domain (str): Sorgulanacak alan adı (örn: "google.com")
    
    Returns:
        Dict: IP ve lokasyon bilgilerini içeren sözlük
        
    Raises:
        socket.gaierror: Alan adı çözümlenemediğinde
        requests.RequestException: IP bilgileri alınamadığında
    """
    try:
        # Alan adından IP adresi al
        ip_address = socket.gethostbyname(domain)
        
        # ipinfo.io API'sinden lokasyon bilgilerini al
        response = requests.get(f'https://ipinfo.io/{ip_address}/json')
        response.raise_for_status()  # HTTP hatalarını kontrol et
        location_data = response.json()
        
        # Sonuçları düzenle
        result = {
            'domain': domain,
            'ip_address': ip_address,
            'city': location_data.get('city'),
            'region': location_data.get('region'),
            'country': location_data.get('country'),
            'location': location_data.get('loc'),
            'organization': location_data.get('org'),
            'timezone': location_data.get('timezone')
        }
        
        return result
        
    except socket.gaierror as e:
        raise Exception(f"Alan adı çözümlenemedi: {str(e)}")
    except requests.RequestException as e:
        raise Exception(f"IP bilgileri alınamadı: {str(e)}")

def print_domain_info(domain: str) -> None:
    """
    Alan adı bilgilerini konsola yazdırır.
    
    Args:
        domain (str): Sorgulanacak alan adı
    """
    try:
        info = get_domain_info(domain)
        print(f"\nAlan Adı: {info['domain']}")
        print(f"IP Adresi: {info['ip_address']}")
        print(f"Şehir: {info['city']}")
        print(f"Bölge: {info['region']}")
        print(f"Ülke: {info['country']}")
        print(f"Koordinatlar: {info['location']}")
        print(f"Organizasyon: {info['organization']}")
        print(f"Zaman Dilimi: {info['timezone']}")
        
    except Exception as e:
        print(f"Hata: {str(e)}")

def nmap_to_json(target: str) -> Dict[str, Union[str, List[Dict]]]:
    """
    Belirtilen hedef için nmap taraması yapar ve sonuçları JSON formatında döndürür.
    
    Args:
        target (str): Tarama yapılacak IP adresi veya hostname
        
    Returns:
        Dict: Tarama sonuçlarını içeren JSON formatında veri
        
    Raises:
        ValueError: Geçersiz IP veya hostname girildiğinde
        subprocess.CalledProcessError: nmap çalıştırılamadığında
    """
    # Hedef adresin geçerliliğini kontrol et
    try:
        # IP adresi kontrolü
        ipaddress.ip_address(target)
    except ValueError:
        # Hostname formatı kontrolü
        if not re.match(r'^[a-zA-Z0-9.-]+$', target):
            raise ValueError("Geçersiz hedef adresi")
    
    try:
        # nmap komutunu çalıştır
        result = subprocess.run(
            ['nmap', '-sV', '-sC', '-oX', '-', target],
            capture_output=True,
            text=True,
            check=True
        )
        
        # Çıktıyı parse et
        scan_data = {
            'target': target,
            'timestamp': '',
            'ports': []
        }
        
        # Port bilgilerini parse et
        port_regex = r'(\d+)/(\w+)\s+(\w+)\s+(.+)'
        for line in result.stdout.split('\n'):
            if '/tcp' in line or '/udp' in line:
                match = re.search(port_regex, line)
                if match:
                    port_info = {
                        'port': match.group(1),
                        'protocol': match.group(2),
                        'state': match.group(3),
                        'service': match.group(4)
                    }
                    scan_data['ports'].append(port_info)
        
        return scan_data
        
    except subprocess.CalledProcessError as e:
        raise RuntimeError(f"Nmap çalıştırılırken hata oluştu: {str(e)}")

def host_finder2(domain):
    global sonuclar
    results = get_domain_info(domain=domain)
    sonuclar[domain]["host"] = results

    
def nmap(domain):
    global sonuclar
    results = nmap_to_json(target=domain)
    sonuclar[domain]["nmap"] = results
    
    
def host_finder():
    global rapor
    results = get_domain_info(domain=rapor["domain"])
    rapor["host-info"] = results
    
    
def trace_route():
    global rapor

    return

def nmap_base():
    global rapor
    results = nmap_to_json(target=rapor["domain"])
    rapor["nmap"] = results
    print(results)
    return

def nmap_os():
    global rapor

    return

def nslookup():
    global rapor

    return

def download_homepage():
    global rapor

    return

def download_assets():
    global rapor
    
    return






rapor = {
    "domain": None,
    "host-info": None,
    "tracert": None,
    "dns-info": None, 
}


print("WEB-GUVENLIK TESTI ARACIMIZ BASLAMISTIR")
print("-------------------------------------------")

sitelerim=[
    "q-e.io",
    "istinye.edu.tr",
    "koc.edu.tr",
    "isimtescil.com",
    "hostinger.com"
]

sonuclar = {
    
}


for site in sitelerim:
    sonuclar[site] = {}
    islev1 = threading.Thread(target=host_finder2, args= [site])
    islev2 = threading.Thread(target=nmap, args= [site])
    islev1.start()
    islev2.start()


while True:
    print(sonuclar)
    time.sleep(1)

# print("ALAN ADI GIRINIZ: ")
# rapor["domain"]=input()
# host_finder()
# nmap_base()